#!/bin/bash

### BEGIN INIT INFO
# Provides:          gargantext-testserver
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts gargantext backend test server
# Description:       starts gargantext backend test server using start-stop-daemon
### END INIT INFO

PATH=$PATH:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=$(pipenv --py)
NAME=gargantext-testserver
DESC=gargantext-testserver

# Have to send SIGINT to django testserver main process in order to kill its sub-processes
STOP_SCHEDULE="${STOP_SCHEDULE:-INT/5/KILL/5}"

BASH=/bin/bash
CELERY_INIT=$(dirname $0)/gargantext-celery

GARGANTEXT_CONF=$(realpath ${GARGANTEXT_CONF:-gargantext.ini})
DAEMON_OPTS="-u $PWD/manage.py runserver"

test -x "$DAEMON" || exit 0

. /lib/init/vars.sh
. /lib/lsb/init-functions

# Try to extract gargantext testserver pidfile
PID=$(grep -oP '^\s*TESTSERVER_PIDFILE\s*=\s*\K.+' $GARGANTEXT_CONF | tail -1)
PID=${PID:-/tmp/gargantext_testserver.pid}

gargantext_reload_celery_when_needed() {
	# Can't reference global variables from this function, so get parameters
	# from arguments; PID is the pidfile of django test server
	PID="$1"
	CELERY_INIT="$2"

	# Wait for testserver to start to get the correct pid
	sleep 2

	# Watch testserver and restart celery when it stops, provided that
	# testserver is not totally stopped (to check this we check its parent
	# process), and celery is running
	[ -s "$PID" ] && PARENT_PID=$(cat $PID) && CHILD=$(pgrep -P $PARENT_PID)
	[ -s "$PID" -a -n "$PARENT_PID" -a -n "$CHILD" ] && \
		((while kill -0 "$CHILD"; do sleep 1; done) && \
		 kill -0 "$PARENT_PID" && \
		 $CELERY_INIT status && \
		 $CELERY_INIT restart) > /dev/null 2>&1

	# Start again...
	kill -0 "$PARENT_PID" > /dev/null 2>&1 && \
		gargantext_reload_celery_when_needed "$PID" "$CELERY_INIT"
}

start() {
	# Start the daemon/service
	#
	# Returns:
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	# Already running?
	start-stop-daemon --start --pidfile $PID --exec $DAEMON --test > /dev/null \
		|| return 1

	ERROR_LOG=$(mktemp)
	CMD="exec $DAEMON $DAEMON_OPTS 2> $ERROR_LOG 1> /dev/null"

	# Voodoo to disable stderr temporarily
	exec 7>&2 2>/dev/null
	# Check for errors at initialization that couldn't be catched otherwise
	$DAEMON $DAEMON_OPTS --noreload 2> $ERROR_LOG 1> /dev/null &
	# Wait 2 second and kill process, if it was already exited we have an error
	if sleep 2 && ! kill $! &> /dev/null; then
		log_progress_msg "[$(tail -1 $ERROR_LOG)]"
		return 2
	fi
	# Voodoo to restore stderr
	sleep 0.1 && exec 2>&7

	# Start the daemon
	start-stop-daemon --start --pidfile $PID --make-pidfile --background --startas $BASH --chdir "$PWD" -- -c "$CMD" \
		|| return 2

	# Sleep 1 second and get error message if any
	sleep 1
	ERROR=$(tail -1 $ERROR_LOG)
	start-stop-daemon --status --pidfile $PID --exec $DAEMON > /dev/null \
		|| ( log_progress_msg "[$ERROR]" && return 2 )

	# Wait for a restart in the background and reload celery if needed. We need
	# to export function and exec a new bash with nohup, otherwise current
	# process would be attached to current terminal.
	export -f gargantext_reload_celery_when_needed
	nohup $BASH -c "gargantext_reload_celery_when_needed '$PID' '$CELERY_INIT'" > /dev/null 2>&1 &
}

test_config() {
	# Test the gargantext configuration
	[ -f "$GARGANTEXT_CONF" ]
}

stop() {
	# Stops the daemon/service
	#
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred

	start-stop-daemon --stop --quiet --retry $STOP_SCHEDULE --remove-pidfile --pidfile $PID

	# Let start-stop-daemon take time to remove pidfile
	RETVAL="$?"
	sleep 1

	return "$RETVAL"
}

case "$1" in
	start)
		log_daemon_msg "Starting $DESC" "$NAME"
		start
		case "$?" in
			0|1) log_end_msg 0 ;;
			2)   log_end_msg 1 ;;
		esac
		cat $ERROR_LOG && rm $ERROR_LOG
		;;
	stop)
		log_daemon_msg "Stopping $DESC" "$NAME"
		stop
		case "$?" in
			0|1) log_end_msg 0 ;;
			2)   log_end_msg 1 ;;
		esac
		;;
	restart|reload|force-reload)
		log_daemon_msg "Restarting $DESC" "$NAME"

		# Check configuration before stopping nginx
		if ! test_config; then
			log_end_msg 1 # Configuration error
			exit $?
		fi

		stop
		case "$?" in
			0|1)
				start
				case "$?" in
					0) log_end_msg 0 ;;
					1) log_end_msg 1 ;; # Old process is still running
					*) log_end_msg 1 ;; # Failed to start
				esac
				cat $ERROR_LOG && rm $ERROR_LOG
				;;
			*)
				# Failed to stop
				log_end_msg 1
				;;
		esac
		;;
	configtest|testconfig)
		log_daemon_msg "Testing $DESC configuration"
		test_config
		log_end_msg $?
		;;
	status)
		status_of_proc -p $PID "$DAEMON" "$NAME" && exit 0 || exit $?
		;;
	*)
		echo "Usage: $NAME {start|stop|restart|reload|force-reload|status|configtest}" >&2
		exit 3
		;;
esac
