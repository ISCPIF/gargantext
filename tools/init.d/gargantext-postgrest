#!/bin/sh

### BEGIN INIT INFO
# Provides:          gargantext-postgrest
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts postgrest web server for gargantext
# Description:       starts postgrest for gargantext using start-stop-daemon
### END INIT INFO

PATH=$PATH:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=${POSTGREST:-$(which postgrest)}
NAME=gargantext-postgrest
DESC=gargantext-postgrest

STOP_SCHEDULE="${STOP_SCHEDULE:-QUIT/5/TERM/5/KILL/5}"

BASH=/bin/bash

POSTGREST_CONF=$(realpath ${POSTGREST_CONF:-postgrest.conf})

# Try to extract postgrest logfile
POSTGREST_LOG=$(printf "$(grep -oP '^\s*logfile\s*=\s*"\K(\\"|[^"])+' $POSTGREST_CONF | tail -1)")
POSTGREST_LOG=$(realpath ${POSTGREST_LOG:-postgrest.log})

# Try to extract postgrest pidfile
PID=$(printf "$(grep -oP '^\s*pidfile\s*=\s*"\K(\\"|[^"])+' $POSTGREST_CONF | tail -1)")
PID=${PID:-/tmp/postgrest.pid}

DAEMON_OPTS=$POSTGREST_CONF

test -x "$DAEMON" || exit 0

. /lib/init/vars.sh
. /lib/lsb/init-functions

start() {
	# Start the daemon/service
	#
	# Returns:
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	CMD="exec $DAEMON $DAEMON_OPTS >> $POSTGREST_LOG 2>&1"
	start-stop-daemon --start --quiet --pidfile $PID --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --pidfile $PID --make-pidfile --background --startas $BASH -- -c "$CMD" \
		|| return 2
	sleep 1
	start-stop-daemon --status --pidfile $PID --exec $DAEMON > /dev/null \
		|| return 2
}

test_config() {
	# Test the postgrest configuration
    [ -f "$POSTGREST_CONF" ]
}

stop() {
	# Stops the daemon/service
	#
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry $STOP_SCHEDULE --remove-pidfile --pidfile $PID

	# Let start-stop-daemon take time to remove pidfile
	RETVAL="$?"
	sleep 1

	return "$RETVAL"
}

reload() {
	# Function that sends a SIGHUP to the daemon/service
	start-stop-daemon --stop --signal HUP --quiet --pidfile $PID
	return 0
}

case "$1" in
	start)
		log_daemon_msg "Starting $DESC" "$NAME"
		start
		case "$?" in
			0|1) log_end_msg 0 ;;
			2)   log_end_msg 1 ;;
		esac
		;;
	stop)
		log_daemon_msg "Stopping $DESC" "$NAME"
		stop
		case "$?" in
			0|1) log_end_msg 0 ;;
			2)   log_end_msg 1 ;;
		esac
		;;
	restart)
		log_daemon_msg "Restarting $DESC" "$NAME"

		# Check configuration before stopping nginx
		if ! test_config; then
			log_end_msg 1 # Configuration error
			exit $?
		fi

		stop
		case "$?" in
			0|1)
				start
				case "$?" in
					0) log_end_msg 0 ;;
					1) log_end_msg 1 ;; # Old process is still running
					*) log_end_msg 1 ;; # Failed to start
				esac
				;;
			*)
				# Failed to stop
				log_end_msg 1
				;;
		esac
		;;
	reload|force-reload)
		log_daemon_msg "Reloading $DESC configuration" "$NAME"

		# Check configuration before stopping nginx
		#
		# This is not entirely correct since the on-disk nginx binary
		# may differ from the in-memory one, but that's not common.
		# We prefer to check the configuration and return an error
		# to the administrator.
		if ! test_config; then
			log_end_msg 1 # Configuration error
			exit $?
		fi

		reload
		log_end_msg $?
		;;
	configtest|testconfig)
		log_daemon_msg "Testing $DESC configuration"
		test_config
		log_end_msg $?
		;;
	status)
		status_of_proc -p $PID "$DAEMON" "$NAME" && exit 0 || exit $?
		;;
	*)
		echo "Usage: $NAME {start|stop|restart|reload|force-reload|status|configtest}" >&2
		exit 3
		;;
esac
